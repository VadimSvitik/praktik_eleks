import os
import time
import psutil
import threading
import win32serviceutil
import win32service
import win32event
import servicemanager

class MyService(win32serviceutil.ServiceFramework):
    _svc_name_ = 'MyService'
    _svc_display_name_ = 'My Service'

    def __init__(self, args):
        win32serviceutil.ServiceFramework.__init__(self, args)
        self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)
        self.is_alive = True

    def SvcStop(self):
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        win32event.SetEvent(self.hWaitStop)
        self.is_alive = False

    def SvcDoRun(self):
        servicemanager.LogMsg(servicemanager.EVENTLOG_INFORMATION_TYPE, servicemanager.PYS_SERVICE_STARTED, (self._svc_name_, ''))
        self.main()

    def main(self):
        # Основний код служби
        while self.is_alive:
            active_processes = psutil.process_iter(['pid', 'name'])

            for process in active_processes:
                # Перевірка, чи це той процес, за яким слідкуємо
                if process.info['name'].lower() == 'target_process.exe':
                    # Проводимо логіку служби, наприклад, виводимо повідомлення чи сповіщення
                    print('Цільовий процес активний')

            time.sleep(5)  # Часовий інтервал для перевірки активних процесів

if __name__ == '__main__':
    if len(sys.argv) == 1:
        servicemanager.Initialize()
        servicemanager.PrepareToHostSingle(MyService)
        servicemanager.StartServiceCtrlDispatcher()
    else:
        win32serviceutil.HandleCommandLine(MyService)
